#
# Copyright (c) 2017 Stratosphere Laboratory.
#
# This file is part of ManaTI Project
# (see <https://stratosphereips.org>). It was created by 'Raul B. Netto <raulbeni@gmail.com>'
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. See the file 'docs/LICENSE' or see <http://www.gnu.org/licenses/>
# for copying permission.
#
# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2017-06-26 15:00
from __future__ import unicode_literals

from django.db import migrations,connection, transaction
from manati.analysis_sessions.models import AnalysisSession
from manati.share_modules.util import get_data_from_url
import json
import datetime
import logging

logger = logging.getLogger(__name__)


def dictfetchall(cursor):
    "Return all rows from a cursor as a dict"
    columns = [col[0] for col in cursor.description]
    return [
        dict(zip(columns, row))
        for row in cursor.fetchall()
    ]


def get_all_weblogs(id=None, analysis_session_id=None):
    with connection.cursor() as cursor:
        if id:
            cursor.execute("SELECT * FROM manati_weblogs WHERE id = %s", [id])
        elif analysis_session_id:
            cursor.execute("SELECT * FROM manati_weblogs WHERE analysis_session_id = %s", [analysis_session_id])
        else:
            cursor.execute("SELECT * FROM manati_weblogs")
        weblogs = dictfetchall(cursor)
    return weblogs

def check_and_create_ioc(value, ioc_type):
    with connection.cursor() as cursor:
        cursor.execute("SELECT * FROM manati_indicators_of_compromise WHERE value = %s AND ioc_type = %s", [value, ioc_type])
        iocs = dictfetchall(cursor)

    if iocs:
        return iocs[0]['id']
    else:
        with connection.cursor() as cursor:
            cursor.execute("INSERT INTO  manati_indicators_of_compromise (value, ioc_type, created_at, updated_at) VALUES (%s,%s, %s, %s);",
                           [value, ioc_type, datetime.datetime.now(), datetime.datetime.now()])
            cursor.execute("SELECT * FROM manati_indicators_of_compromise WHERE value = %s AND ioc_type = %s",
                           [value, ioc_type])
            iocs = dictfetchall(cursor)
        return iocs[0]['id']


def create_relation_weblog_ioc(weblog_id, ioc_id1, ioc_id2):
    c = connection.cursor()
    try:
        c.execute("SELECT * FROM manati_indicators_of_compromise_weblogs WHERE weblog_id = %s AND ioc_id = %s ",
                       [weblog_id, ioc_id1])
        iocs1 = dictfetchall(c)
    finally:
        c.close()

    c = connection.cursor()
    if not iocs1:
        try:
            c.execute("INSERT INTO  manati_indicators_of_compromise_weblogs (weblog_id, ioc_id) VALUES (%s,%s);",
                [weblog_id, ioc_id1])
        finally:
            c.close()

    c = connection.cursor()
    try:
        c.execute("SELECT * FROM manati_indicators_of_compromise_weblogs WHERE weblog_id = %s AND ioc_id = %s ",
                  [weblog_id, ioc_id2])
        iocs2 = dictfetchall(c)
    finally:
        c.close()

    c = connection.cursor()
    if not iocs2:
        try:
            c.execute("INSERT INTO  manati_indicators_of_compromise_weblogs (weblog_id, ioc_id) VALUES (%s,%s);",
                [weblog_id, ioc_id2])
        finally:
            c.close()




def migrate_weblogs(apps, schema_editor):
    with transaction.atomic():
        with connection.cursor() as cursor:
            cursor.execute("SELECT id,type_file FROM manati_analysis_sessions")
            analysis_sessions = dictfetchall(cursor)

        for analysis_session in analysis_sessions:
            type_file = analysis_session['type_file']
            if type_file == '':
                logger.error("ERROR TYPE_FILE EMPTY AS_ID " + str(analysis_session['id']))
                continue
            weblogs = get_all_weblogs(analysis_session_id=analysis_session['id'])
            key_url = AnalysisSession.INFO_ATTRIBUTES[type_file]['url']
            key_ip = AnalysisSession.INFO_ATTRIBUTES[type_file]['ip_dist']
            for weblog in weblogs:
                weblog_id = weblog['id']
                attributes = json.loads(weblog['attributes'])
                try:
                    url = attributes[key_url]
                    ip = attributes[key_ip]
                    d_type, domain = get_data_from_url(url)
                except Exception as ex:
                    logger.error("Error processing weblog id " + weblog_id + " | " + str(ex))
                    continue
                ioc_id1 = check_and_create_ioc(domain, d_type)
                ioc_id2 = check_and_create_ioc(ip, 'ip')
                create_relation_weblog_ioc(weblog_id, ioc_id1, ioc_id2)


class Migration(migrations.Migration):

    dependencies = [
        ('analysis_sessions','0027_ioc'),
    ]

    operations = [
        migrations.RunPython(migrate_weblogs),

    ]
